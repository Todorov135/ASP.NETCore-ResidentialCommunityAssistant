// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResidentialCommunityAssistant.Data;

#nullable disable

namespace ResidentialCommunityAssistant.Data.Migrations
{
    [DbContext(typeof(CommunityAssistantDBContext))]
    [Migration("20230621123707_AddCommunityTopicTable")]
    partial class AddCommunityTopicTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "492c2f53-e30a-4da9-b639-e599ef6d7794",
                            ConcurrencyStamp = "281002f3-1aab-4a88-b803-cefbf8e8615b",
                            Name = "HomeManager",
                            NormalizedName = "HOMEMANAGER"
                        },
                        new
                        {
                            Id = "df52a94f-e70f-4872-a5a8-48631411afdb",
                            ConcurrencyStamp = "1f557737-98c4-465c-87f7-43911bafb6a0",
                            Name = "StoreManager",
                            NormalizedName = "STOREMANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8815d5cc-c403-43e8-b2d3-40f57a8d1d61",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0fed4592-666c-46dd-8970-20f7942a2be1",
                            Email = "homeManager@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HOMEMANAGER@MAIL.COM",
                            NormalizedUserName = "HOMEMANAGER@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKJbb/GoS8BadK/gcxGqMynrn7LQGtiz1Oq6KdjuatvRuYNSJmWQ0dl3fc3XIhJCtA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee18a46d-b019-43e7-8076-a26ab7329eff",
                            TwoFactorEnabled = false,
                            UserName = "homeManager@mail.comr"
                        },
                        new
                        {
                            Id = "579b52e0-38e4-4f41-a30f-31e72767c536",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd4cc5be-dc74-478c-afac-7319445b1a0f",
                            Email = "firstOwner@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FIRSTOWNER@MAIL.COM",
                            NormalizedUserName = "FIRSTOWNER@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDGNIrLN+D7cII45sSdCOqw1O0Rogas9YjpLA+dDegLDyIzQhpbLI2Yl4T6kzwFaJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "decedab5-1877-49d1-b097-d1c9fb13256a",
                            TwoFactorEnabled = false,
                            UserName = "firstOwner@mail.com"
                        },
                        new
                        {
                            Id = "88d33982-06d8-43f0-b809-7d6ed7f3ab23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5dc5b0cd-9810-40dc-b808-a5a730591169",
                            Email = "secondOwner@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SECONDOWNER@MAIL.COM",
                            NormalizedUserName = "SECONDOWNER@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI/oWKp+a4qz/B2VbWxMq1dO/6hu7sKzhhco/fRQRXMs9f0d/uAs5nrjLhzBcL+w5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7401f97-ea2d-45a8-9dc7-14fcea6bac98",
                            TwoFactorEnabled = false,
                            UserName = "secondOwner@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8815d5cc-c403-43e8-b2d3-40f57a8d1d61",
                            RoleId = "492c2f53-e30a-4da9-b639-e599ef6d7794"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ResidentialCommunityAssistant.Data.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("LocationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("LocationTypeId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            LocationTypeId = 2,
                            Name = "Цар Борис III-ти Обединител",
                            Number = "37"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            LocationTypeId = 2,
                            Name = "Александър Малинов",
                            Number = "78"
                        });
                });

            modelBuilder.Entity("ResidentialCommunityAssistant.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LocalityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("LocalityTypeId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocalityTypeId = 1,
                            Name = "Пловдив",
                            PostCode = "4000"
                        },
                        new
                        {
                            Id = 2,
                            LocalityTypeId = 1,
                            Name = "София",
                            PostCode = "1000"
                        });
                });

            modelBuilder.Entity("ResidentialCommunityAssistant.Data.Models.CommunityTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreatorId");

                    b.ToTable("CommunityTopics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 2,
                            CreatedOn = new DateTime(2023, 6, 21, 15, 5, 15, 0, DateTimeKind.Unspecified),
                            CreatorId = "579b52e0-38e4-4f41-a30f-31e72767c536",
                            Description = "Закупуване, засаждане и подръжка на тревни чимове за двора пред сградата.",
                            Title = "Озеленяване на градинка"
                        });
                });

            modelBuilder.Entity("ResidentialCommunityAssistant.Data.Models.LocalityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.ToTable("LocalityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "гр."
                        },
                        new
                        {
                            Id = 2,
                            Name = "с."
                        });
                });

            modelBuilder.Entity("ResidentialCommunityAssistant.Data.Models.LocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.ToTable("LocationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ул."
                        },
                        new
                        {
                            Id = 2,
                            Name = "бул."
                        });
                });

            modelBuilder.Entity("ResidentialCommunityAssistant.Data.Models.UserAddress", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("UsersAddresses");

                    b.HasData(
                        new
                        {
                            UserId = "8815d5cc-c403-43e8-b2d3-40f57a8d1d61",
                            AddressId = 2
                        },
                        new
                        {
                            UserId = "579b52e0-38e4-4f41-a30f-31e72767c536",
                            AddressId = 2
                        },
                        new
                        {
                            UserId = "88d33982-06d8-43f0-b809-7d6ed7f3ab23",
                            AddressId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResidentialCommunityAssistant.Data.Models.Address", b =>
                {
                    b.HasOne("ResidentialCommunityAssistant.Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResidentialCommunityAssistant.Data.Models.LocationType", "LocationType")
                        .WithMany()
                        .HasForeignKey("LocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("ResidentialCommunityAssistant.Data.Models.City", b =>
                {
                    b.HasOne("ResidentialCommunityAssistant.Data.Models.LocalityType", "LocalityType")
                        .WithMany()
                        .HasForeignKey("LocalityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocalityType");
                });

            modelBuilder.Entity("ResidentialCommunityAssistant.Data.Models.CommunityTopic", b =>
                {
                    b.HasOne("ResidentialCommunityAssistant.Data.Models.Address", "Address")
                        .WithMany("CommunityTopics")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ResidentialCommunityAssistant.Data.Models.UserAddress", b =>
                {
                    b.HasOne("ResidentialCommunityAssistant.Data.Models.Address", "Address")
                        .WithMany("Homeowners")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ResidentialCommunityAssistant.Data.Models.Address", b =>
                {
                    b.Navigation("CommunityTopics");

                    b.Navigation("Homeowners");
                });
#pragma warning restore 612, 618
        }
    }
}
